{"Name":"Buddy Platform SDK","Id":174,"Alias":"buddy-platform-sdk","Description":"# Buddy SDK\n\n## Introduction\n\nBuddy enables developers to build engaging, cloud-connected apps without having to write, test, manage or scale server-side code or infrastructure. We noticed that most mobile app developers end up writing the same code over and over again.  User management, photo management, geolocation checkins, metadata, and more.  \n\nBuddy\u0027s easy-to-use, scenario-focused APIs let you spend more time building your app, and less time worrying about backend infrastructure.  \n\nLet us handle that stuff for you!\n\n## Features\n\nFor developers the Buddy Platform offers turnkey support for features like the following:\n\n* *User Accounts* - create, delete, authenticate users.\n* *Photos* - add photos, search photos, share photos with other users.\n* *GeoLocation* - checkin, search for places, list past checkins.\n* *Push Notifications* - easily send push notifications to iOS, Android, or Microsoft devices.\n* *Messaging* - send messages to other users, create message groups.\n* *Friends* - set up social relationships between users with friends lists.\n* *Game Scores, Metadata, and Boards* - Keep track of game stores and states for individual users as well as across users.\n* *Commerce* - Offer items for in-app purchase via Facebook Commerce.\n* *And more* - Checkout the rest of the offering at [buddy.com/developers](http://buddy.com/developers/).\n\n\n## How It works\n\nGetting rolling with the Buddy SDK is very easy.  First you\u0027ll need to go to [dev.buddy.com](http://dev.buddy.com), to create an account and an application.  This will create an application entry and a key pair consisting of an *Application Name* and an *Application Password*.\n\nOnce you have those, you just create a BuddyClient instance, and call methods on it.\n\n    using Buddy;\n    \n    // ...\n    \n    // create the client\n    var client = new BuddyClient(\"MyApplicationName\", \"MyApplicationPassword\");\n    \n    // create a user\n    client.CreateUserAsync(\"username\",\"password\").ContinueWith(r =\u003e {\n        var user = r.Result;\n        \n        // upload a profile photo\n        Stream photoStream = GetSomePhoto();\n        user.AddProfilePhotoAsync(photoStream);\n    });\n    \nSee Getting Started for more information.\n\n## Publisher Analytics\n\nBuddy is more than just a backend service.  Because our APIs are scenario-based, we collect deep information about how users are using applications.  With that information, we can generate a rich portfolio of analytic data, ranging from when and where users are using your applicaiton to what types of devices they are using it on.  \n\nFor more information, see [Buddy for Publishers](http://buddy.com/publishers/).\n\n## Docs\n\nFull documentation for Buddy\u0027s services are available at [Buddy.com](http://buddy.com/documentation)","Version":"0.2.0.5","Summary":"Use Buddy backend as a service APIs.","QuickStart":"# Getting Started\n\n## Create a Buddy account\n\nGo to [http://dev.buddy.com](http://dev.buddy.com) to create an application account.  Note your *BuddyApplicationName* and *BuddyApplicationPassword*, available once you create an application by clicking the key icon in your application list.\n\n## Start your project\n\nCreate your project and create some *const* variables to hold your BuddyApplicationName and BuddyApplicationPassword:\n\n    public class MyClass {\n        public const string BuddyApplicationName     = \"[Your application name]\";\n        public const string BuddyApplicationPassword = \"[Your app password]\";\n    }\n\n## Call Buddy APIs.\n\n    public void DoSomething() {\n        \n        var buddyClient = new Buddy.BuddyClient(MyClass.BuddyApplicationName, MyClass.BuddyApplicationPassword);\n\n        // log in a user\n        //\n        buddyClient.LoginAsync(username, password).ContinueWith(r =\u003e {\n                \n            user.PhotoAlbums.GetAsync(\"Hawaii Photos\").ContinueWith(r2 =\u003e {\n                PhotoAlbum album = r2.Result;\n  \n                // add a photo\n                //\n                Stream photoStream = LoadSomeLocalPhoto();\n\n                album.AddPictureAsync(photoStream, \"My great photo\", 47.68, -122.2);\n\n            });\n\n        });\n    }\n\n## Check the Developer Portal for Analytics Data\n\nOnce you\u0027ve launched your app, you can then go back to the [Buddy Developer Portal](http://dev.buddy.com) and see how your users are using it.\n\nThe Buddy Developer Portal allows you to search and view users, photos, checkins, and other data that Buddy collects.\n\n\n\n","Hash":"bdbf4f3e1c275904fc1bbb04dfc2dfcb","TargetPlatforms":["ios","android"],"TrialHash":null}